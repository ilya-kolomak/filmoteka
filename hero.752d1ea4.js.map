{"mappings":"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","sources":["src/js/hero.js","src/js/mdApiService.js","node_modules/@swc/helpers/lib/_object_spread.js","node_modules/@swc/helpers/lib/_define_property.js","src/js/genresApi.js","<<jsx-config-pragma.js>>"],"sourcesContent":["import ImageApiService from './mdApiService';\nimport GenresApiService from './genresApi';\n\nconst STORAGE_KEY_GENRES = `genres`;\nconst STORAGE_KEY_RESULTS = `results`;\nlet photosContainer = document.querySelector('.js-photos-container');\nlet merged = {};\nconst form = document.querySelector('.js-search-form');\nconst searchBtn = document.querySelector('.js-search-btn');\n\nconst imageApiService = new ImageApiService();\nconst genresApiService = new GenresApiService();\nform.addEventListener('submit', onSearch);\n// const markup = renderMarkupCard(results);\n\nrender();\nfunction render() {\n  // warningField.textContent = ``;\n  // searchResField.textContent = ``;\n  imageApiService.page = 1;\n  imageApiService\n    .fetchImages()\n    .then(({ results }) => {\n      console.log(results);\n      const markup = renderMarkupCard(results);\n\n      photosContainer.insertAdjacentHTML('beforeend', markup);\n      // return results;\n    })\n    .catch(err => {\n      console.log('error in function render');\n    });\n}\n\nfunction onSearch(e) {\n  e.preventDefault();\n\n  imageApiService.query = e.currentTarget.elements.query;\n\n  imageApiService.fetchImages().then(({ results }) => {\n    localStorage.setItem(STORAGE_KEY_RESULTS, JSON.stringify({ results }));\n    console.log(results);\n    const markup = renderMarkupCard(results);\n\n    photosContainer.insertAdjacentHTML('beforeend', markup);\n    // return results;\n  });\n\n  // genresApiService.fetchGenres().then(({ genres }) => {\n  //   localStorage.setItem(STORAGE_KEY_GENRES, JSON.stringify({ genres }));\n  //   // return genres;\n  // });\n  // const markup = renderMarkupCard(merged);\n  // console.log(markup);\n  // // renderMarkupCard();\n}\n\n// function addGenresToResults() {\n//   const savedResults = JSON.parse(localStorage.getItem(STORAGE_KEY_RESULTS));\n//   const savedGenres = JSON.parse(localStorage.getItem(STORAGE_KEY_GENRES));\n//   console.log(savedGenres);\n//   console.log(savedResults);\n\n//   let merged = { ...savedResults, ...savedGenres };\n\n//   console.log(merged);\n//   // return merged;\n// }\n\nfunction renderMarkupCard(results) {\n  // addGenresToResults();\n\n  return results\n    .map(({ poster_path, title, original_title, release_date }) =>\n      // genres: [{ name }],\n      {\n        return ` <li class=\"hero-item\">\n    <div class=\"hero-thumb\">\n    <img\n     src=\"https://image.tmdb.org/t/p/w500/${poster_path}\"\n    alt=\"${title}\" loading=\"lazy\" class=\"img-item\" />\n    </div>\n    <div class=\"hero-info\">\n      <p class=\"film-title\">${original_title}</p>\n       <p class=\"film-info\">${name}|</p>\n      <p class=\"film-info\">${release_date}</p>\n    </div>\n   </li>`;\n      }\n    )\n    .join('');\n}\n\n// function renderMarkupCard(merged) {\n//   // addGenresToResults();\n\n//   return merged\n//     .map(\n//       ({\n//         results: { poster_path, title, original_title, release_date },\n//         genres: { name },\n//       }) => {\n//         return ` <li class=\"hero-item\">\n//     <div class=\"hero-thumb\">\n//     <img\n//      src=\"${poster_path}\"\n//     alt=\"${title}\" loading=\"lazy\" class=\"img-item\" />\n//     </div>\n//     <div class=\"hero-info\">\n//       <p class=\"film-title\">${original_title}</p>\n//       <p class=\"film-info\">${name}|</p>\n//       <p class=\"film-info\">${release_date}</p>\n//     </div>\n//    </li>`;\n//       }\n//     )\n//     .join('');\n\n//   photosContainer.insertAdjacentHTML('beforeend', markup);\n// }\n","import axios from 'axios';\n\nexport default class ImageApiService {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n  async fetchImages() {\n    try {\n      const response = await axios.get(\n        'https://api.themoviedb.org/3/trending/movie/week?api_key=38f6f2c88436f6a6fb5d137cfc7b2688'\n      );\n      this.page += 1;\n      // console.log(response.data);\n      return response.data;\n    } catch (error) {}\n  }\n\n  async fetchGenres() {\n    try {\n      const response = await axios.get(\n        'https://api.themoviedb.org/3/genre/movie/list?api_key=38f6f2c88436f6a6fb5d137cfc7b2688&language=en-US'\n      );\n      console.log(response.data);\n      // return response.genres;\n    } catch (error) {}\n  }\n\n  insertGenresToMovieObj() {\n    return this.fetchImages().then(data => {\n      return this.fetchGenres().then(genresList => {\n        return data.map(movie => ({\n          ...movie,\n          release_date: movie.release_date.split('-')[0],\n          genres: movie.genre_ids\n            .map(id => genresList.filter(el => el.id === id))\n            .flat(),\n        }));\n      });\n    });\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n\n// const BASE_URL = `https://api.themoviedb.org/3`;\n// const KEY = `d91911ebb88751cf9e5c4b8fdf4412c9`;\n// export default class NewApiService {\n//   constructor() {\n//     this.searchQuery = '';\n//     this.page = 1;\n//   }\n//   fetchPopularArticles() {\n//     const url = `${BASE_URL}/movie/popular?api_key=${KEY}&language=en-US&page=${this.page}`;\n//     return fetch(url)\n//       .then(response => response.json())\n//       .then(({ results }) => {\n//         return results;\n//       });\n//   }\n//   fetchSearchArticles() {\n//     const url = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&page=${this.page}&query=${this.searchQuery}`;\n//     return fetch(url)\n//       .then(response => response.json())\n//       .then(({ results }) => {\n//         return results;\n//       });\n//   }\n//   fetchPopularArticlesPages() {\n//     const url = `${BASE_URL}/movie/popular?api_key=${KEY}&language=en-US&page=${this.page}`;\n//     return fetch(url).then(response => response.json());\n//   }\n//   fetchSearchArticlesPages() {\n//     const url = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&page=${this.page}&query=${this.searchQuery}`;\n//     return fetch(url).then(response => response.json());\n//   }\n//   fetchGenres() {\n//     const url = `${BASE_URL}/genre/movie/list?api_key=${KEY}`;\n//     return fetch(url)\n//       .then(response => response.json())\n//       .then(data => {\n//         return data.genres;\n//       });\n//   }\n//   insertGenresToMovieObj() {\n//     return this.fetchPopularArticles().then(data => {\n//       return this.fetchGenres().then(genresList => {\n//         return data.map(movie => ({\n//           ...movie,\n//           release_date: movie.release_date.split('-')[0],\n//           genres: movie.genre_ids\n//             .map(id => genresList.filter(el => el.id === id))\n//             .flat(),\n//         }));\n//       });\n//     });\n//   }\n//   insertGenresToSearchObj() {\n//     return this.fetchSearchArticles().then(data => {\n//       return this.fetchGenres().then(genresList => {\n//         let release_date;\n//         return data.map(movie => ({\n//           ...movie,\n//           release_date: movie.release_date\n//             ? movie.release_date.split('-')[0]\n//             : 'n/a',\n//           genres: movie.genre_ids\n//             ? movie.genre_ids\n//                 .map(id => genresList.filter(el => el.id === id))\n//                 .flat()\n//             : 'n/a',\n//         }));\n//       });\n//     });\n//   }\n//   get query() {\n//     return this.searchQuery;\n//   }\n//   set query(newQuery) {\n//     this.searchQuery = newQuery;\n//   }\n//   get pageNum() {\n//     return this.page;\n//   }\n//   set pageNum(newPage) {\n//     this.page = newPage;\n//   }\n// }\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _objectSpread;\nvar _defineProperty = _interopRequireDefault(require(\"./_define_property\"));\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            (0, _defineProperty).default(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","import axios from 'axios';\n\nexport default class GenresApiService {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n  async fetchGenres() {\n    try {\n      const response = await axios.get(\n        'https://api.themoviedb.org/3/genre/movie/list?api_key=38f6f2c88436f6a6fb5d137cfc7b2688&language=en-US'\n      );\n      this.page += 1;\n      console.log(response.data);\n      return response.data;\n    } catch (error) {}\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n",null],"names":["$2CUkP","parcelRequire","$c519d076f6352209$var$photosContainer","document","querySelector","$c519d076f6352209$var$form","$c519d076f6352209$var$imageApiService","default","$kQYx6","$c519d076f6352209$var$renderMarkupCard","results","map","param","poster_path","title","original_title","release_date","concat","name","join","addEventListener","e","preventDefault","query","currentTarget","elements","fetchImages","then","localStorage","setItem","JSON","stringify","console","log","markup","insertAdjacentHTML","page","catch","err","$bpxeT","$1e9ad4562197654f$export$2e2bcd8739ae039","ImageApiService","this","searchQuery","key","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","get","_ctx","sent","_this","data","fetchGenres","genresList","movie","$dDDEV","split","genres","genre_ids","id","filter","el","flat","newQuery","Object","defineProperty","module","exports","value","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","enumerable","forEach","$9eddae5a012cde57$var$_defineProperty","obj","__esModule","configurable","writable","$f2e79e9000e64ea6$export$2e2bcd8739ae039","GenresApiService"],"version":3,"file":"hero.752d1ea4.js.map"}