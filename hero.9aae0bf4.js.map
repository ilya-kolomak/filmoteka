{"mappings":"sSAAA,IAAAA,EAAAC,EAAA,S,aAKA,IAAIC,EAAkBC,SAASC,cAAc,wBAE7C,MAAMC,EAAOF,SAASC,cAAc,mBAG9BE,GAFYH,SAASC,cAAc,kBAEjB,IAAI,EAAAJ,EAAAO,UACH,IAAI,EAAAC,EAAAD,SA0D7B,SAASE,EAAiBC,GAGxB,OAAOA,EACJC,KAAI,EAACC,YAAEA,EAAWC,MAAEA,EAAKC,eAAEA,EAAcC,aAAEA,KAGjC,8GAG6BH,gBACjCC,+GAGmBC,sCACAE,yCACDD,gCAKxBE,KAAK,G,CA9EVZ,EAAKa,iBAAiB,UAsBtB,SAAkBC,GAChBA,EAAEC,iBAEFd,EAAgBe,MAAQF,EAAEG,cAAcC,SAASF,MAEjDf,EAAgBkB,cAAcC,MAAK,EAACf,QAAEA,MACpCgB,aAAaC,QApCW,UAoCkBC,KAAKC,UAAU,C,QAAEnB,KAC3DoB,QAAQC,IAAIrB,GACZ,MAAMsB,EAASvB,EAAiBC,GAEhCR,EAAgB+B,mBAAmB,YAAaD,EAAO,G,IAzBzD1B,EAAgB4B,KAAO,EACvB5B,EACGkB,cACAC,MAAK,EAACf,QAAEA,MACPoB,QAAQC,IAAIrB,GACZ,MAAMsB,EAASvB,EAAiBC,GAEhCR,EAAgB+B,mBAAmB,YAAaD,EAAO,IAGxDG,OAAMC,IACLN,QAAQC,IAAI,2BAA2B,G,oFC9B7C,IAAAM,EAAApC,EAAA,SAEe,MAAMqC,EAKnBC,oBACE,IACE,MAAMC,QAAiBH,EAAA9B,QAAMkC,IAC3B,6FAIF,OAFAC,KAAKR,MAAQ,EAENM,EAASG,IACF,CAAd,MAAOC,GAAO,C,CAGlBL,oBACE,IACE,MAAMC,QAAiBH,EAAA9B,QAAMkC,IAC3B,yGAEFX,QAAQC,IAAIS,EAASG,KAEP,CAAd,MAAOC,GAAO,C,CAGlBC,yBACE,OAAOH,KAAKlB,cAAcC,MAAKkB,GACtBD,KAAKI,cAAcrB,MAAKsB,GACtBJ,EAAKhC,KAAIqC,IAAU,IACrBA,EACHjC,aAAciC,EAAMjC,aAAakC,MAAM,KAAK,GAC5CC,OAAQF,EAAMG,UACXxC,KAAIyC,GAAML,EAAWM,QAAOC,GAAMA,EAAGF,KAAOA,MAC5CG,c,CAMXC,YACEd,KAAKR,KAAO,C,CAGVb,YACF,OAAOqB,KAAKe,W,CAEVpC,UAAMqC,GACRhB,KAAKe,YAAcC,C,CA/CrBC,cACEjB,KAAKe,YAAc,GACnBf,KAAKR,KAAO,C,sFCLhB,IAAAG,EAAApC,EAAA,SAEe,MAAM2D,EAKnBrB,oBACE,IACE,MAAMC,QAAiBH,EAAA9B,QAAMkC,IAC3B,yGAIF,OAFAC,KAAKR,MAAQ,EACbJ,QAAQC,IAAIS,EAASG,MACdH,EAASG,IACF,CAAd,MAAOC,GAAO,C,CAGlBY,YACEd,KAAKR,KAAO,C,CAGVb,YACF,OAAOqB,KAAKe,W,CAEVpC,UAAMqC,GACRhB,KAAKe,YAAcC,C,CAvBrBC,cACEjB,KAAKe,YAAc,GACnBf,KAAKR,KAAO,C","sources":["src/js/hero.js","src/js/mdApiService.js","src/js/genresApi.js"],"sourcesContent":["import ImageApiService from './mdApiService';\nimport GenresApiService from './genresApi';\n\nconst STORAGE_KEY_GENRES = `genres`;\nconst STORAGE_KEY_RESULTS = `results`;\nlet photosContainer = document.querySelector('.js-photos-container');\nlet merged = {};\nconst form = document.querySelector('.js-search-form');\nconst searchBtn = document.querySelector('.js-search-btn');\n\nconst imageApiService = new ImageApiService();\nconst genresApiService = new GenresApiService();\nform.addEventListener('submit', onSearch);\n// const markup = renderMarkupCard(results);\n\nrender();\nfunction render() {\n  // warningField.textContent = ``;\n  // searchResField.textContent = ``;\n  imageApiService.page = 1;\n  imageApiService\n    .fetchImages()\n    .then(({ results }) => {\n      console.log(results);\n      const markup = renderMarkupCard(results);\n\n      photosContainer.insertAdjacentHTML('beforeend', markup);\n      // return results;\n    })\n    .catch(err => {\n      console.log('error in function render');\n    });\n}\n\nfunction onSearch(e) {\n  e.preventDefault();\n\n  imageApiService.query = e.currentTarget.elements.query;\n\n  imageApiService.fetchImages().then(({ results }) => {\n    localStorage.setItem(STORAGE_KEY_RESULTS, JSON.stringify({ results }));\n    console.log(results);\n    const markup = renderMarkupCard(results);\n\n    photosContainer.insertAdjacentHTML('beforeend', markup);\n    // return results;\n  });\n\n  // genresApiService.fetchGenres().then(({ genres }) => {\n  //   localStorage.setItem(STORAGE_KEY_GENRES, JSON.stringify({ genres }));\n  //   // return genres;\n  // });\n  // const markup = renderMarkupCard(merged);\n  // console.log(markup);\n  // // renderMarkupCard();\n}\n\n// function addGenresToResults() {\n//   const savedResults = JSON.parse(localStorage.getItem(STORAGE_KEY_RESULTS));\n//   const savedGenres = JSON.parse(localStorage.getItem(STORAGE_KEY_GENRES));\n//   console.log(savedGenres);\n//   console.log(savedResults);\n\n//   let merged = { ...savedResults, ...savedGenres };\n\n//   console.log(merged);\n//   // return merged;\n// }\n\nfunction renderMarkupCard(results) {\n  // addGenresToResults();\n\n  return results\n    .map(({ poster_path, title, original_title, release_date }) =>\n      // genres: [{ name }],\n      {\n        return ` <li class=\"hero-item\">\n    <div class=\"hero-thumb\">\n    <img\n     src=\"https://image.tmdb.org/t/p/w500/${poster_path}\"\n    alt=\"${title}\" loading=\"lazy\" class=\"img-item\" />\n    </div>\n    <div class=\"hero-info\">\n      <p class=\"film-title\">${original_title}</p>\n       <p class=\"film-info\">${name}|</p>\n      <p class=\"film-info\">${release_date}</p>\n    </div>\n   </li>`;\n      }\n    )\n    .join('');\n}\n\n// function renderMarkupCard(merged) {\n//   // addGenresToResults();\n\n//   return merged\n//     .map(\n//       ({\n//         results: { poster_path, title, original_title, release_date },\n//         genres: { name },\n//       }) => {\n//         return ` <li class=\"hero-item\">\n//     <div class=\"hero-thumb\">\n//     <img\n//      src=\"${poster_path}\"\n//     alt=\"${title}\" loading=\"lazy\" class=\"img-item\" />\n//     </div>\n//     <div class=\"hero-info\">\n//       <p class=\"film-title\">${original_title}</p>\n//       <p class=\"film-info\">${name}|</p>\n//       <p class=\"film-info\">${release_date}</p>\n//     </div>\n//    </li>`;\n//       }\n//     )\n//     .join('');\n\n//   photosContainer.insertAdjacentHTML('beforeend', markup);\n// }\n","import axios from 'axios';\n\nexport default class ImageApiService {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n  async fetchImages() {\n    try {\n      const response = await axios.get(\n        'https://api.themoviedb.org/3/trending/movie/week?api_key=38f6f2c88436f6a6fb5d137cfc7b2688'\n      );\n      this.page += 1;\n      // console.log(response.data);\n      return response.data;\n    } catch (error) {}\n  }\n\n  async fetchGenres() {\n    try {\n      const response = await axios.get(\n        'https://api.themoviedb.org/3/genre/movie/list?api_key=38f6f2c88436f6a6fb5d137cfc7b2688&language=en-US'\n      );\n      console.log(response.data);\n      // return response.genres;\n    } catch (error) {}\n  }\n\n  insertGenresToMovieObj() {\n    return this.fetchImages().then(data => {\n      return this.fetchGenres().then(genresList => {\n        return data.map(movie => ({\n          ...movie,\n          release_date: movie.release_date.split('-')[0],\n          genres: movie.genre_ids\n            .map(id => genresList.filter(el => el.id === id))\n            .flat(),\n        }));\n      });\n    });\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n\n// const BASE_URL = `https://api.themoviedb.org/3`;\n// const KEY = `d91911ebb88751cf9e5c4b8fdf4412c9`;\n// export default class NewApiService {\n//   constructor() {\n//     this.searchQuery = '';\n//     this.page = 1;\n//   }\n//   fetchPopularArticles() {\n//     const url = `${BASE_URL}/movie/popular?api_key=${KEY}&language=en-US&page=${this.page}`;\n//     return fetch(url)\n//       .then(response => response.json())\n//       .then(({ results }) => {\n//         return results;\n//       });\n//   }\n//   fetchSearchArticles() {\n//     const url = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&page=${this.page}&query=${this.searchQuery}`;\n//     return fetch(url)\n//       .then(response => response.json())\n//       .then(({ results }) => {\n//         return results;\n//       });\n//   }\n//   fetchPopularArticlesPages() {\n//     const url = `${BASE_URL}/movie/popular?api_key=${KEY}&language=en-US&page=${this.page}`;\n//     return fetch(url).then(response => response.json());\n//   }\n//   fetchSearchArticlesPages() {\n//     const url = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&page=${this.page}&query=${this.searchQuery}`;\n//     return fetch(url).then(response => response.json());\n//   }\n//   fetchGenres() {\n//     const url = `${BASE_URL}/genre/movie/list?api_key=${KEY}`;\n//     return fetch(url)\n//       .then(response => response.json())\n//       .then(data => {\n//         return data.genres;\n//       });\n//   }\n//   insertGenresToMovieObj() {\n//     return this.fetchPopularArticles().then(data => {\n//       return this.fetchGenres().then(genresList => {\n//         return data.map(movie => ({\n//           ...movie,\n//           release_date: movie.release_date.split('-')[0],\n//           genres: movie.genre_ids\n//             .map(id => genresList.filter(el => el.id === id))\n//             .flat(),\n//         }));\n//       });\n//     });\n//   }\n//   insertGenresToSearchObj() {\n//     return this.fetchSearchArticles().then(data => {\n//       return this.fetchGenres().then(genresList => {\n//         let release_date;\n//         return data.map(movie => ({\n//           ...movie,\n//           release_date: movie.release_date\n//             ? movie.release_date.split('-')[0]\n//             : 'n/a',\n//           genres: movie.genre_ids\n//             ? movie.genre_ids\n//                 .map(id => genresList.filter(el => el.id === id))\n//                 .flat()\n//             : 'n/a',\n//         }));\n//       });\n//     });\n//   }\n//   get query() {\n//     return this.searchQuery;\n//   }\n//   set query(newQuery) {\n//     this.searchQuery = newQuery;\n//   }\n//   get pageNum() {\n//     return this.page;\n//   }\n//   set pageNum(newPage) {\n//     this.page = newPage;\n//   }\n// }\n","import axios from 'axios';\n\nexport default class GenresApiService {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n  async fetchGenres() {\n    try {\n      const response = await axios.get(\n        'https://api.themoviedb.org/3/genre/movie/list?api_key=38f6f2c88436f6a6fb5d137cfc7b2688&language=en-US'\n      );\n      this.page += 1;\n      console.log(response.data);\n      return response.data;\n    } catch (error) {}\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n"],"names":["$g2xul","parcelRequire","$aab6d1c60b3e9a0a$var$photosContainer","document","querySelector","$aab6d1c60b3e9a0a$var$form","$aab6d1c60b3e9a0a$var$imageApiService","default","$5ClfQ","$aab6d1c60b3e9a0a$var$renderMarkupCard","results","map","poster_path","title","original_title","release_date","name","join","addEventListener","e","preventDefault","query","currentTarget","elements","fetchImages","then","localStorage","setItem","JSON","stringify","console","log","markup","insertAdjacentHTML","page","catch","err","$2shzp","$bad6cf57a2d639a6$export$2e2bcd8739ae039","async","response","get","this","data","error","insertGenresToMovieObj","fetchGenres","genresList","movie","split","genres","genre_ids","id","filter","el","flat","resetPage","searchQuery","newQuery","constructor","$4170fd13af55a556$export$2e2bcd8739ae039"],"version":3,"file":"hero.9aae0bf4.js.map"}